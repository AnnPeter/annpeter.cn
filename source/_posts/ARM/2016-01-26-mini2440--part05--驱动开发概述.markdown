---
layout: post
title: "mini2440--part05--驱动开发概述"
date: 2016-01-26 15:30:15 +1209
comments: true
categories: ARM mini2440
keywords: ARM,mini2440,驱动开发概述,博客,AnnPeter's Blog
description: "mini2440--part05--驱动开发概述"
zTree: true

---

###驱动分类：
* 常规分类：字符设备、块设备、网络设备
* 总线分类法：USB设备、PCI设备、平台总线设备

1. 字符设备：是一种按字节来访问的设备,字符驱动则负责驱动字符设备,这样的驱动通常实现 open, close, read和write 系统调用。例:串口,LED,按键。

2. 块设备：在大部分的Unix系统中, 块设备定义为:以块(通常是512字节)为最小传输单位的设备,块设备不能按字节处理数据。而Linux则允许块设备传送任意数目的字节。因此,块和字符设备的区别仅仅是驱动的与内核的接口不同。常见的块设备包括硬盘,flash,SD卡...

3. 网络接口：可以是一个硬件设备,如网卡; 但也可以是一个纯粹的软件设备, 比如回环接口(lo).一个网络接口负责发送和接收数据报文。

<!-- more -->


###硬件访问技术：
在Linux系统中，无论是内核程序还是应用程序,都只能使用虚拟地址,而芯片手册中给出的硬件寄存器地址或者RAM地址则是物理地址,无法直接使用,因此,我们读写寄存器的要将它的物理地址映射为虚拟地址。

* 动态地址映射：在驱动程序中采用ioremap函数将物理地址映射为虚拟地址。
  函数原型：void * ioremap(physaddr, size)
  参数： physaddr:待映射物理地址，size：映射的区域长度
  返回值：映射后的虚拟地址
* 静态映射：Linux系统根据用户事先指定的映射关系，在内核启动时，自动的将物理地址映射为虚拟地址。
  静态地址映射，用户通过map_desc(Linux在分模块在很多地方都有map_desc的实例，他们通过本模块的iotable_init函数进行初始化)结构来指明物理地址与虚拟地址的映射关系。

```cpp
struct map_desc{
unsigned long virtual; //映射后的虚拟地址
unsigned long pfn;	//物理地址所在的页帧号
unsigned long length;	//映射长度
unsigned long type;	//映射的设备类型
};
//pfn:在驱动程序中，利用__phys_to_pfn(物理地址)可以计算出物理地址所在的物理页帧号
```

在完成地址映射后，就可以读写寄存器了，Linux内核提供了一系列函数，用来读写寄存器。
```cpp
unsigned ioread8(void* addr)
unsigned ioread16(void* addr)
unsigned ioread32(void* addr)
unsigned readb(addr)
unsigned readw(addr)
unsigned readl(addr)

void iowrite8(u8 value, void* addr)
void iowrite16(u16 value, void* addr)
void iowrite32(u32 value, void* addr)
void writeb(unsigned value, addr)
void writew(unsigned value, addr)
void writel(unsigned value, addr)
```


##字符设备驱动
![字符设备访问方式示意图](/upload/2016/FEB/02/imgs/1454427439.png)
###通过字符设备文件，应用程序可以使用相应的字符设备驱动程序来控制字符设备。创建字符设备的方法一般有两种：

1. 使用mknod命令：mknod /dev/文件名 c 主设备号 次设备号 (c表明这是一个字符文件，主设备号用来表示一个特定的驱动程序。次设备号用来表示使用该驱动程序的各设备)
   使用cat /proc/devices,可以查看设备文件所对应的设备号

   范例：先安装驱动模块，然后使用cat /proc/devices，查看本模块设备的主设备号，然后使用mknode命令创建设备，主设备号为查出来的设备号，从设备号可取0~255内的值。

2. 使用函数在驱动程序中创建

###驱动模型
1. 驱动初始化
 * 分配设备描述结构
 * 初始化设备描述结构
 * 注册设备描述结构
 * 硬件初始化
2. 实现设备操作
3. 驱动注销


在任何一种驱动模型中，设备都会用内核中的一种结构来描述。其中字符设备在内核中使用struct cdev来描述。
```cpp
struct cdev{
	struct kobject kobj;
    struct module* owner;
    const struct file_operation* ops; //设备操作集
    struct list_head list;
    dev_t dev;	//设备号，dev_t实际上就是u32类型
    unsigned int count;	//设备数
};
```

Linux内核中使用dev_t类型来定义设备号，dev_t实质是32位的unsigned int，其中高12位为主设备号，低20位为次设备号。关于设备号的组合拆分，请看下面代码。
```cpp
//知道主设备号，次设备号，组合形成设备号
dev_t dev = MKDEV(主设备号, 次设备号);

//从dev_t中分解出主设备号
主设备号 = MAJOR(dev_t dev);

//从dev_t中分解出次设备号
次设备号 = MINOR(dev_t dev);
```

###为设备分配主设备号
1. 静态申请：开发者自己选择一个数字作为主设备号，然后通过函数register_chrdev_region向内核申请使用。缺点是：如果申请使用的设备号已经被内核中的其它驱动使用了，则申请失败。
2. 动态分配：使用alloc_chrdev_region由内核分配一个可用的主设备号。优点：不会发送冲突。

不论我们使用哪种方法进行分配，都应该在驱动退出时，使用unregister_chrdev_region函数释放这些设备号。


###操作函数集
struct file_operations是一个函数指针的集合，定义能在设备上进行的操作。结构中的函数指针指向驱动中的函数，这些函数实现一个针对设备的操作，对于不支持的操作则设置函数指针为NULL，例如。
```cpp
struct file_operations dev_fops = {
	.llseek = NULL,
	.read = dev_read,
	.write = dev_write,
	.ioctl = dev_ioctl,
	.open = dev_open,
	.release = dev_release,
};
```

##字符设备驱动
1. 驱动初始化
	* 分配cdev
	* 初始化cdev
	* 注册cdev
	* 硬件初始化
2. 实现设备操作
	* open
	* read
	* write
	* lseek
	* close
3. 驱动注销


####cdev变量的定义可以采用静态和动态两种方法

* 静态分配struct cdev mdev;
* 动态分配struct cdev* pdev = cdev_alloc();

####描述结构的初始化
>struct cdev的初始化使用cdev_init函数完成。<br>
>cdev_init(struct cdev *cdev, const struct file_operations *fops)<br>
>参数：cdev:待初始化的cdev结构<br>
>     fops：设备对应的操作函数集<br>
><br>
>字符设备的注册使用cdev_add函数来完成
>cdev_add(struct cdev* p, dev_t dev, unsigned count)<br>
>参数：p：待添加到内核的字符设备结构<br>
>     dev：设备号<br>
>     count：该类设备的设备个数<br>



####实现设备的操作

1. int (*open)(struct inode*, struct file*);//打开设备，响应open系统调用open设备方法是驱动程序用来为以后的操作完成初始化准备工作的。在大部分驱动程序中，open完成：标明次设备号和启动设备的工作。

2. int (*release)(struct inode*, struct file*);	//关闭设备，响应close系统调用

3. loff_t (*llseek)(struct inode*, loff_t, int)	//重定位读写指针，响应lseek系统调用

4. ssize_t (*read)(struct file* filp, char \__user* buff, size_t count, loff_t* offp);	//从设备读取数据，响应read系统调用
参数：filp:与字符设备文件关联的file结构指针, 由内核创建。
     buff : 从设备读取到的数据,需要保存到的位置。由read系统调用提供该参数。
     count: 请求传输的数据量,由read系统调用提供该参数。
     offp: 文件的读写位置,由内核从file结构中取出后,传递进来。
read设备的方法通常完成两件事：1. 从设备中读取数据（属于硬件访问类的操作）；2. 将数据返回给应用程序
buff参数是来源于用户空间的指针，这类指针都不能能被内核代码直接引用，必须使用专门的函数
int copy_from_user(void* to, const void __user* from, int n);
int copy_to_user(void* __user* to, const void* from, int n);

5. ssize_t (*write)(struct file*, const char __user*, size_t, loff_t*);	//向设备写入数据，响应write系统调用
write设备方法通常完成两件事：1. 从应用程序提供的地址中取出数据， 2. 将数据写入设备(属于硬件访问类的操作)


* struct file
在Linux系统中，每打开一个文件，在内核中都会关联一个struct file，它由内核在打开时创建，在文件关闭后释放。
重要成员：loff_t f_pos;	//文件读写指针
struct file_operations* f_op;	//该文件所对应的操作

* struct inode
每一个存在于文件系统内的文件都会关联一个inode结构，该结构主要用来记录文件物理上的信息。因此，它和代表打开文件的file结构是不相同的。一个文件没有被打开时不会关联file结构，但却会关联一个inode结构。
重要成员：dev_t i_rdev:设备号


####注销驱动
当我们从内核中卸载驱动程序的时候,需要使用cdev_del函数来完成字符设备的注销

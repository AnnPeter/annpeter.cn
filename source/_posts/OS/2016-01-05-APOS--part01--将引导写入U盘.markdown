---
layout: post
title: "APOS--part01--将引导写入U盘"
date: 2016-01-05 22:16:23 +1387
comments: true
categories: OS APOS
keywords: OS,APOS,将引导写入U盘,博客,AnnPeter's Blog
description: "APOS--part01--将引导写入U盘"
zTree: true

---

>本篇将教你如何将教你引导原理，但是不会真正涉及到如何引导一个系统，本篇完成的主要工作是：<br>
>*了解引导原理<br>
>*编写引导，主要功能：在PC机上显示字符<br>
>*编写工具程序将引导写入U盘<br>
>*开机测试<br>
><br>
>环境：Ubuntu 15.01<br>
>工具：bin86、gcc<br>

<!-- more -->

###电脑加电后，BIOS进行自检，主要完成的工作有：
1. 电脑加电，此时cs=0xFFFF,ip=0x0000,寻址0xFFFF0（ROM BIOS映射区），硬件自检POST(Power On Self Test)
2. 检测系统中内存和显卡等关键部件的存在和工作状态
3. 查找并执行显卡等接口卡BIOS，进行设备初始化
4. 执行系统BIOS，进行系统检测--检测和配置系统中安装的即插即用设备
5. 更新CMOS中扩展系统配置数据ESCD(Extended System Configuration Data),实际上就是BIOS保留的以前的设备资源分配表。
6. 按指定启动顺序从软盘、硬盘、U盘或者光驱启动
7. 将一个可启动的磁盘的0磁道0扇区读入0x7C00处，并设置cs=0x07C0,ip=0x0000

TIP：因为BIOS是固化在ROM中的，作为初学者可不必太过深究内部的实现，我们要做的就是在BIOS的后面开始引导系统，当然，在后期，我们必须了解BIOS为我们提供了什么，我们才能完善我们的引导和系统。

接下来，BIOS会把硬盘的头512字节的数据复制到内存，检查这512字节是不是以16进制的55 AA结尾，如果是则认为这是一个启动程序，并跳转到这段程序的开头执行指令。在MBR主引导记录中，实际上启动代码只有446字节，有4个16字节是硬盘分区表（这就是为什么MBR分区格式只能有4个主分区的原因），最后两个字节为结束标志字。

##接下来，我们正式开始本篇内容：

###第一步：安装工具bin86,在终端中输入命令
```vim
$ sudo apt-get install bin86
```


###第二步：编写引导代码
```vim
entry start
start:
mov ax,#0xb800
mov ds,ax
mov byte[0],#0x41
mov byte[1],#0x1f
hlt
```
解释：
把数据段寄存器设置为0xb800,0xb800是文本模式下显存起始地址；0a000h是图形模式下显存起始地址；起始地址之后的一段内存数据决定了界面上显示的文字、图形、前背景色。

具体如下：
颜色属性由两个十六进制数字指定 -- 第一个为背景，第二个则为
前景。每个数字可以为以下任何值之一.

| code | color | |code | color |
|---------|-----------|  |--------|------------|
|    0    |    黑色    | |    8    |     淡蓝色   |
|    1    |    蓝色    | |    9    |     淡绿色   |
|    2    |    绿色    | |    A    |     淡浅绿色   |
|    3    |    浅绿色  | |    B   |     灰色   |
|    4    |    红色    | |    C   |     淡红色   |
|    5    |    紫色    | |    D   |     淡紫色   |
|    6    |    黄色    | |    E   |     淡黄色   |
|    7    |    白色    | |    F   |     亮白色   |


在这个CPU的最初的阶段，一般屏幕有80行，25列.
可以看出在这个时候，段0xb800开头的这段内存有80x25x2字节的内存用于设置屏幕的文字。
也就是内存地址160的字节的值就代表第2行第一个字符。


接下来编译代码：
```vim
$ as86 boot.s -o boot.o
$ ld86 boot.o -o boot	#获得二进制文件boot，接下来第三步完成的功能就是将二进制文件写入U盘中
```

###第三步：编写下载工具dnw
```cpp
/*************************************************************************
    > File Name: dnw.c
    > Author: AnnPeter
    > Mail: 864587669@qq.com
    > Created Time: Fri 15 Jan 2016 08:06:03 AM CST
 ************************************************************************/

#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>

void print_msg(char* msg, int flag)
{
	char temp[1024];
	if(flag == 0)
	{
		//print success info
		sprintf(temp, "\033[22;34m%s\033[0m", msg);
	}
	else if(flag == -1)
	{
		//print error info
		sprintf(temp, "\033[22;31m%s\033[0m", msg);
	}

	puts(temp);
}

void ap_perror(char* msg)
{
	print_msg(msg, -1);
}

void ap_success(char* msg)
{
	print_msg(msg, 0);
}

int main(int argc, char* argv[])
{
	if(argc != 3)
	{
		ap_perror("use like: ./dnw sour_file dest_file");
		return 0;
	}

	char* sour_file = argv[1];
	char* dest_file = argv[2];

	int dev_desc, file_desc;
	unsigned char buffer[512];
	file_desc = open(sour_file, O_RDONLY);
	if(file_desc == -1)
	{
		ap_perror("failed to read file boot");
		return -1;
	}

	read(file_desc, buffer, 510);
	close(file_desc);

	buffer[510] = 0x55;
	buffer[511] = 0xaa;

	dev_desc = open(dest_file, O_RDWR|O_CREAT);
	if(dev_desc == -1)
	{
		char erro_info[100];
		sprintf(erro_info, "failed to open device %s, maybe you should use sudo.", dest_file);
		ap_perror(erro_info);
		return -1;
	}

	write(dev_desc, buffer, 512);
	close(dev_desc);
	ap_success("file write done.");
	return 0;
}
```

```vim
接下来编译程序:
$ gcc -o dnw dnw.c

使用fdisk查看U盘的位置
$ sudo fdisk -l	#一般为/dev/sd*(我的U盘在/dev/sdd下)

使用dnw工具，将boot拷贝到U盘中
$ sudo ./dnw boot /dev/sdd
```


###第四步：开机测试
开机选择你的U盘作为启动项，是不是能看到我们写入的字符。

####这是真机下的测试结果
![真机下的测试结果](http://localhost/upload/2016/JAN/23/imgs/1453565743.png)

我在做测试的时候出现了一种情况就是，屏幕上打印出来的是一个B，在其它区域还有许多乱码，我用同样的U盘放在另一台电脑上启动却没有如此的情况。这个问题你可以通过重启电脑来试着解决一下，最好连电池都拔下来，过几秒再装上。



##下面我提供一些测试的方法，看看你的程序是否正确，同时更加深入理解这个过程。
```vim
使用dd命令，将我们写入U盘的前512个字节取出来，放入u.log中
#obs表示每个输出缓冲区大小，ibs表示每个输入缓冲区大小，count表示拷贝个数，单位为输入缓冲区的大小可用bs代替
#obs和ibs
$ sudo dd if=/dev/sdd of=u.log bs=512 count=1

使用二进制查看命令打开u.log
$ xxd u.log
```

##下面是我用xxd查看u.log查看到的内容
![xxd查看到的U.log](http://localhost/upload/2016/JAN/23/imgs/1453568323.png)

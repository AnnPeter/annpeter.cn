<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: apos | AnnPeter's Blog]]></title>
  <link href="http://www.annpeter.cn/blog/categories/apos/atom.xml" rel="self"/>
  <link href="http://www.annpeter.cn/"/>
  <updated>2016-04-16T11:13:25+08:00</updated>
  <id>http://www.annpeter.cn/</id>
  <author>
    <name><![CDATA[AnnPeter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APOS--part03--从实模式到保护模式]]></title>
    <link href="http://www.annpeter.cn/blog/2016/01/13/APOS--part03--%E4%BB%8E%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/index.html"/>
    <updated>2016-01-13T07:06:27+08:00</updated>
    <id>http://www.annpeter.cn/blog/2016/01/13/APOS--part03--%E4%BB%8E%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%88%B0%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/APOS--part03--从实模式到保护模式</id>
    <content type="html"><![CDATA[<a name="L........."></a>
<h2>实模式</h2>

<p>计算机加电的时候其实就是按照8086的寻址方式来寻址（Intel8086是16位的CPU，有16位的寄存器、16位的数据总线以及20位的地址总线），3段地址和偏移地址两部分组成，物理地址计算公式：</p>

<p>物理地址 = 段地址 × 16 + 偏移地址</p>

<p>即段地址左移4位，加上偏移地址，其中，段地址和偏移地址都是16位的</p>

<!-- more -->


<a name="L...........................1MB..................1MB..........................."></a>
<h4>在实模式下只能访问1MB内存，此时这1MB内存中内容分布如图</h4>

<p><img src="/upload/2016/JAN/23/imgs/1453558510.png" alt="实模式1M内存分布" />
很显然我们在实模式下有一部分内存是不可动的，我们能改变的只是自由内存区和引导程序加载区，比如你如果动了中断向量表区，那么调用BIOS中断将会出错</p>

<p>从80386开始，Intel家族CPU进入32位时代。80386开始有32位地址线，寻址空间达到了4G。所以使用16位的寄存器已经不够了，这时候我们需要采用新的方法提高寻址能力。</p>

<p>在实模式下，段地址可以看做是地址的一部分：假设说段地址为XXXXh，表示是以XXXX0h开始的一段内存，再由偏移地址指出具体地址。</p>

<p>而在保护模式下，虽然段地址仍然由原来的16位的cs，ds等寄存器表示，但此时它仅仅变成了一个索引，这个索引指向一个数据结构的一个表项，表项中详细定义了段的起始地址、界限以及其它属性等。这个数据结构我们称之为GDT（Global Descriptor Table 全局描述符表）</p>

<p><img src="/upload/2016/JAN/24/imgs/1453573298.png" alt="GDT原理示意图" /></p>

<a name="L...........................GDTR...Global.Descriptor.Table.Register..."></a>
<h5>首先我们来介绍一下GDTR（Global Descriptor Table Register）</h5>

<p>在Intel的计算机中是使用一个寄存器来保存GDT的首地址：GDTR是一个48位（6字节）寄存器，低16位用于存储段的索引长度，即全局描述符表长度，称为表限，以1字节为一单位（后面说到其实就是全局描述符的个数）。高32位用来存储描述符表的基址。具体如下：</p>

<p><img src="/upload/2016/JAN/24/imgs/1453574049.jpg" alt="GDTR功能描述" />
这里，首先告诉你全局描述符表里面的每个项，即每个全局描述符长为8字节。</p>

<p></br></p>

<a name="L........................"></a>
<h5>再介绍段选择子：</h5>

<p>段选择子也是一个寄存器，共16位，用来存储使用第几个段和这个段的部分属性</p>

<p><img src="/upload/2016/JAN/24/imgs/1453574068.jpg" alt="段选择子功能描述" />
这里的索引值就是指的第几个段，占这个16位寄存器的高13位，共可寻址2<sup>13</sup>=8192个段，多了就寻址不到了，前面说过，每个描述符8个字节，那么可以知道，这个全局描述符表最大可以有8192*8=64KB</p>

<p>TI是个标志，TI=0时表示此选择子是个全局描述符的选择子，为1时表示这是个局部描述符的选择子，此处可以知道，全局描述符的选择子和局部描述符的选择子其实是同一个寄存器。</p>

<p>RPL为特权级，共有四个特权级，最高特权级为00，表示最底层的操作。</p>

<a name="L...................................."></a>
<h5>最后介绍一下全局描述符表</h5>

<p>全局描述符表是由一个一个的全局描述符组成的，每个描述符8字节，共64位，这64位的作用和分布如下</p>

<p><img src="/upload/2016/JAN/24/imgs/1453574993.jpg" alt="GDT每一项的作用" /></p>

<ol>
<li><p>段限：顾名思义就是段的长度限制，也就是本描述符所描述的段最大可以有多长，从图上可以看出来，段限分为两部分，共20位，而段的长度的单位是由G标志来控制的，G=0表示长度的单位为1字节，G=1表示长度的单位为4KB。比如G=0而段限为100，那么，此段的大小为1B×100=100B，而如果G=1而段限为100，那么此段大小为4KB×100+4KB=404KB（注意，这里的段限是指向头的，需要加4KB）。</p>

<p> 这里还可以看出来，段基址也被分为两部分，共32位基址，段的基址就是这个段在内存中的开始地址，这里需要指出的是，段的基址为此段可访问的开始地址，加上段限就是此段可访问的地址，那么如果段限为0的话此段还是可以访问开始地址的，这里不深究。</p></li>
<li><p>TYPE：表明此段的类型
 4位中的最高位被清 0 的时候表是它是数据段，相应的余下的三位，从左到右依次为 E、W、A，即数据段的 TYPE 为：0EWA。其中 E 表示向下增长位，置 1 时表示向下增长（这主要是在大小需要动态改变的堆栈段中使用，如果是向下增长的段，动态的改变段的大小限制，会让堆栈空间加到堆栈的底部。如果堆栈的大小不需要改变，那么这个段既可以是向下增长的段，也可以是非向下增长的段） ；W 表示可写位，置 1表示可写；A表示被访问位（如果 CPU访问了它，此位将会被置 1） 。</p>

<p> 4 位中的最高位被置 1 时表示它是代码段，相应的余下的三位，从左到右依次为 C、Ｒ、Ａ，即代码段的 TYPE 为：1CRA。其中 C 是表明此代码段是否是一致代码段，如果 C 被置1，表明此是一致代码段。一致代码段主要是用于特权级访问控制，这在以后的实验报告中会详细论述；R 表明此段是否可读，置 1 表示可读；A表示被访问位，这与前述一样。</p></li>
<li><p>S：为 1 时表示这是一个代码段或数据段描述符，为 0 时表示这是一个系统段描述符。
 系统段描述符又称为特殊段描述符， 包括： 局部描述符表 （LDT） 描述符， 任务状态段 （TSS）描述符，调用门描述符，中断门描述符，陷阱门及任务门描述符等。</p></li>
<li><p>DPL：表示特权级，从 00~11，共 0，1，2，3 四个特权级</p></li>
<li><p>P：为 0 是表示此描述符无效，不能被使用</p></li>
<li><p>AVL：留给程序员随便用的</p></li>
<li><p>D/B：为 0 的时候表示它是一个 16 位的段，为 1时表示它是一个 32 位的段</p></li>
</ol>


<p>[Tip]：设置这些寄存器什么的在汇编里面都有特定的伪指令对应</p>

<a name="L.................."></a>
<h2>进入保护模式</h2>

<p>在由实模式到保护模式的最大的问题就是内存访问的问题了，现在内存访问问题解决了，那么怎么进入实模式呢？
很明显要设置GDTR，还有打开A20地址线，一般还要初始化8259A中断控制器，最后一步就是设置CR0控制寄存器，你可能不知道我在说什么，没关系，我一个个介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APOS--part02--利用10号中断，在屏幕上显示字符]]></title>
    <link href="http://www.annpeter.cn/blog/2016/01/09/APOS--part02--%E5%88%A9%E7%94%A810%E5%8F%B7%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A%E6%98%BE%E7%A4%BA%E5%AD%97%E7%AC%A6/index.html"/>
    <updated>2016-01-09T07:15:15+08:00</updated>
    <id>http://www.annpeter.cn/blog/2016/01/09/APOS--part02--%E5%88%A9%E7%94%A810%E5%8F%B7%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%8A%E6%98%BE%E7%A4%BA%E5%AD%97%E7%AC%A6/APOS--part02--利用10号中断，在屏幕上显示字符</id>
    <content type="html"><![CDATA[<p>本文在裸机下，实现利用BIOS中段在屏幕上显示字符。</p>

<!-- more -->


<pre><code class="vim">!以!或;开头的为注释
!以.开头的为汇编指示符，不会在编译时产生任何代码
.globl begtext, begdata, begbss, endtext, enddata, endbss
.text   ;正文段
begtext:    ;在正文段定义一个标识符
.data
begdata:
.bss
begbss:

.text   !切换至正文段
BOOTSEG = 0x07C0    !BIOS加载bootsect代码的原始段地址

!entry是保留关键字，用于连接器ld86在生产的可执行文件中,包括其后制定的标志
!'start'通常在连接多个目标文件生成一个可执行文件时应该在其中一个汇编程序
!中用entry指定一个入口标号，以便调试
entry start
start:
    jmpi go, BOOTSEG    !jmpi段间跳转指令
                        !格式是： jmpi 段内偏移，段选择子
                        !当BIOS把程序加载到物理内存0x7C00处并跳转到该处执行
                        !此时，程序的物理地址在0x7C00处，而段寄存器cs为0
                        !(cs:ip=0x0000:0x7C00)，所以我们要跳转到BOOTSEG处
                        !执行后cs:ip=0x07C0:0x0005
                        !指令的物理地址cs*10h+ip
go:
    mov ax, #BOOTSEG    !cs-&gt;ax,用来初始化数据段寄存器ds和es，让他们都指向0x7C00段，
                        !便于对程序中数据(字符串)进行寻址
    mov ds, ax
    mov es, ax
! 几种寻址方式:
! * 直接寄存器寻址(跳转到bx值指定的地址处):
!       MOV bx, ax
!       JMP bx
! * 间接寄存器寻址(bx值指定内存位置处的内容作为跳转的地址):
!       MOV [bx], ax
!       JMP [bx]
! * 立即数&amp;字符串地址值保存:
!       MOV ax, #1234
!       MOV ax, #msg1
! * 绝对寻址(把内存地址1234处的内容放入ax):
!       MOV ax, 1234
! * 索引寻址(把第2个操作数所指内存处的值放入ax):
!       MOV ax, msg1[bx]
!       MOV ax, msg1[bx*4 + di]

    mov cx, #20     !cx = 串长度
    mov dx, #0x0101
    mov bx, #0x000C !页号为0(bh = 0x00)黑底红字(bl = 0x0C,高亮)
    mov bp, #BootMessage+32 !es:bp = 串地址，为什么要加32
                            !在使用qemu的调试中，这里是不需要加32的
                            !在使用真机进行调试时，这里需要加32
                            !主要原因跟在使用as86汇编进行编译链接后，会在生
                            !成的文件开头多出32字节，这多出来的32字节是MINIX
                            !可执行 文件的头结构。
    mov ax, #0x1301 !ah = 0x13, al = 0x01
    int 0x10
!功能13H
!功能描述：在Teletype模式下显示字符串 入口参数：AH＝13H BH＝页码
!BL＝属性(若AL=00H或01H) CX＝显示字符串长度 (DH、DL)＝坐标(行、列)
!ES:BP＝显示字符串的地址 AL＝显示输出方式
!0——字符串中只含显示字符，其显示属性在BL中。显示后，光标位置不变
!1——字符串中只含显示字符，其显示属性在BL中。显示后，光标位置改变
!2——字符串中含显示字符和显示属性。显示后，光标位置不变
!3——字符串中含显示字符和显示属性。显示后，光标位置改变
!出口参数：无

loop_forever:
    jmp loop_forever    !死循环，防止程序进入数据段

BootMessage:
    .ascii  "Loading system ..."        !字符串定义
    .byte 13,10     !回车和换行符的ASCII码定义，字符定义使用.byte

!.org定义了当前汇编的位置
!会把汇编器便已过程中当前的位置计数器调整为给出的值
.org 478

boot_flag:
    .word 0xAA55

.text
endtext:
.data
enddata:
.bss
endbss:
!这样写表示不区分代码段，数据段,bss段(未初始化的变量);只有一个段
</code></pre>

<a name="L......:"></a>
<h4>编译:</h4>

<pre><code class="vim">$ as86 -0 -a -o bootsect.o bootsect.s     ; 生成与as部分兼容的目标文件(-a)
$ ld86 -0 -s -o bootsect bootsect.o       ; 链接, 去掉符号信息(-s)

//上面给出的版本是真机调试的版本，在使用qemu调试的版本中，使用ll命令查看bootsect,最后生成的bootsect为544字节,
//并非512, 多出来的32字节是MINIX可执行文件的头结构, 为了使这个程序能引导启动机器,需要人工去掉这32字节

$dd bs=32 if=bootsect of=boot skip=1
</code></pre>

<a name="L............"></a>
<h4>测试结果</h4>

<ol>
<li><p>这是QEMU下的测试结果</p>

<p><img src="http://localhost/upload/2016/JAN/23/imgs/1453569831.png" alt="QEMU下的测试结果" /></p></li>
<li><p>这是真机下的测试结果</p>

<p><img src="http://localhost/upload/2016/JAN/23/imgs/1453570778.png" alt="真机下的测试结果" /></p></li>
</ol>


<p></br></p>

<hr />

<p>BIOS 中断详细参数参见:<br>
1. <a href="http://wenku.baidu.com/link?url=b33px-tPBF8TKPpmacQ4-yI2Fe6GkZ7m6zVXa4G8-lBFoXFHYg4CYn4bRJaV4T3AVbGC3BD2AHDg-Rzx8JiiGJObqV7X_wQzZoh2mu3RWYy">百度文库Int 10的详细参数</a><br>
2. <a href="http://www.ctyme.com/intr/int.htm">所有中断的参数</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APOS--part01--将引导写入U盘]]></title>
    <link href="http://www.annpeter.cn/blog/2016/01/05/APOS--part01--%E5%B0%86%E5%BC%95%E5%AF%BC%E5%86%99%E5%85%A5U%E7%9B%98/index.html"/>
    <updated>2016-01-05T15:49:23+08:00</updated>
    <id>http://www.annpeter.cn/blog/2016/01/05/APOS--part01--%E5%B0%86%E5%BC%95%E5%AF%BC%E5%86%99%E5%85%A5U%E7%9B%98/APOS--part01--将引导写入U盘</id>
    <content type="html"><![CDATA[<blockquote><p>本篇将教你如何将教你引导原理，但是不会真正涉及到如何引导一个系统，本篇完成的主要工作是：<br>
<em>了解引导原理<br>
</em>编写引导，主要功能：在PC机上显示字符<br>
<em>编写工具程序将引导写入U盘<br>
</em>开机测试<br>
<br>
环境：Ubuntu 15.01<br>
工具：bin86、gcc<br></p></blockquote>

<!-- more -->


<a name="L..................BIOS.........................................."></a>
<h3>电脑加电后，BIOS进行自检，主要完成的工作有：</h3>

<ol>
<li>电脑加电，此时cs=0xFFFF,ip=0x0000,寻址0xFFFF0（ROM BIOS映射区），硬件自检POST(Power On Self Test)</li>
<li>检测系统中内存和显卡等关键部件的存在和工作状态</li>
<li>查找并执行显卡等接口卡BIOS，进行设备初始化</li>
<li>执行系统BIOS，进行系统检测&ndash;检测和配置系统中安装的即插即用设备</li>
<li>更新CMOS中扩展系统配置数据ESCD(Extended System Configuration Data),实际上就是BIOS保留的以前的设备资源分配表。</li>
<li>按指定启动顺序从软盘、硬盘、U盘或者光驱启动</li>
<li>将一个可启动的磁盘的0磁道0扇区读入0x7C00处，并设置cs=0x07C0,ip=0x0000</li>
</ol>


<p>TIP：因为BIOS是固化在ROM中的，作为初学者可不必太过深究内部的实现，我们要做的就是在BIOS的后面开始引导系统，当然，在后期，我们必须了解BIOS为我们提供了什么，我们才能完善我们的引导和系统。</p>

<p>接下来，BIOS会把硬盘的头512字节的数据复制到内存，检查这512字节是不是以16进制的55 AA结尾，如果是则认为这是一个启动程序，并跳转到这段程序的开头执行指令。在MBR主引导记录中，实际上启动代码只有446字节，有4个16字节是硬盘分区表（这就是为什么MBR分区格式只能有4个主分区的原因），最后两个字节为结束标志字。</p>

<a name="L............................................."></a>
<h2>接下来，我们正式开始本篇内容：</h2>

<a name="L........................bin86........................."></a>
<h3>第一步：安装工具bin86,在终端中输入命令</h3>

<pre><code class="vim">$ sudo apt-get install bin86
</code></pre>

<a name="L.............................."></a>
<h3>第二步：编写引导代码</h3>

<pre><code class="vim">entry start
start:
mov ax,#0xb800
mov ds,ax
mov byte[0],#0x41
mov byte[1],#0x1f
hlt
</code></pre>

<p>解释：
把数据段寄存器设置为0xb800,0xb800是文本模式下显存起始地址；0a000h是图形模式下显存起始地址；起始地址之后的一段内存数据决定了界面上显示的文字、图形、前背景色。</p>

<p>具体如下：
颜色属性由两个十六进制数字指定 &ndash; 第一个为背景，第二个则为
前景。每个数字可以为以下任何值之一.</p>

<table>
<thead>
<tr>
<th> code </th>
<th> color </th>
<th> </th>
<th>code </th>
<th> color </th>
</tr>
</thead>
<tbody>
<tr>
<td>    0    </td>
<td>    黑色    </td>
<td> </td>
<td>    8    </td>
<td>     淡蓝色   </td>
</tr>
<tr>
<td>    1    </td>
<td>    蓝色    </td>
<td> </td>
<td>    9    </td>
<td>     淡绿色   </td>
</tr>
<tr>
<td>    2    </td>
<td>    绿色    </td>
<td> </td>
<td>    A    </td>
<td>     淡浅绿色   </td>
</tr>
<tr>
<td>    3    </td>
<td>    浅绿色  </td>
<td> </td>
<td>    B   </td>
<td>     灰色   </td>
</tr>
<tr>
<td>    4    </td>
<td>    红色    </td>
<td> </td>
<td>    C   </td>
<td>     淡红色   </td>
</tr>
<tr>
<td>    5    </td>
<td>    紫色    </td>
<td> </td>
<td>    D   </td>
<td>     淡紫色   </td>
</tr>
<tr>
<td>    6    </td>
<td>    黄色    </td>
<td> </td>
<td>    E   </td>
<td>     淡黄色   </td>
</tr>
<tr>
<td>    7    </td>
<td>    白色    </td>
<td> </td>
<td>    F   </td>
<td>     亮白色   </td>
</tr>
</tbody>
</table>


<p>在这个CPU的最初的阶段，一般屏幕有80行，25列.
可以看出在这个时候，段0xb800开头的这段内存有80x25x2字节的内存用于设置屏幕的文字。
也就是内存地址160的字节的值就代表第2行第一个字符。</p>

<p>接下来编译代码：
<code>vim
$ as86 boot.s -o boot.o
$ ld86 boot.o -o boot   #获得二进制文件boot，接下来第三步完成的功能就是将二进制文件写入U盘中
</code></p>

<a name="L..............................dnw"></a>
<h3>第三步：编写下载工具dnw</h3>

<pre><code class="cpp">/*************************************************************************
    &gt; File Name: dnw.c
    &gt; Author: AnnPeter
    &gt; Mail: 864587669@qq.com
    &gt; Created Time: Fri 15 Jan 2016 08:06:03 AM CST
 ************************************************************************/

#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdlib.h&gt;

void print_msg(char* msg, int flag)
{
    char temp[1024];
    if(flag == 0)
    {
        //print success info
        sprintf(temp, "\033[22;34m%s\033[0m", msg);
    }
    else if(flag == -1)
    {
        //print error info
        sprintf(temp, "\033[22;31m%s\033[0m", msg);
    }

    puts(temp);
}

void ap_perror(char* msg)
{
    print_msg(msg, -1);
}

void ap_success(char* msg)
{
    print_msg(msg, 0);
}

int main(int argc, char* argv[])
{
    if(argc != 3)
    {
        ap_perror("use like: ./dnw sour_file dest_file");
        return 0;
    }

    char* sour_file = argv[1];
    char* dest_file = argv[2];

    int dev_desc, file_desc;
    unsigned char buffer[512];
    file_desc = open(sour_file, O_RDONLY);
    if(file_desc == -1)
    {
        ap_perror("failed to read file boot");
        return -1;
    }

    read(file_desc, buffer, 510);
    close(file_desc);

    buffer[510] = 0x55;
    buffer[511] = 0xaa;

    dev_desc = open(dest_file, O_RDWR|O_CREAT);
    if(dev_desc == -1)
    {
        char erro_info[100];
        sprintf(erro_info, "failed to open device %s, maybe you should use sudo.", dest_file);
        ap_perror(erro_info);
        return -1;
    }

    write(dev_desc, buffer, 512);
    close(dev_desc);
    ap_success("file write done.");
    return 0;
}
</code></pre>

<pre><code class="vim">接下来编译程序:
$ gcc -o dnw dnw.c

使用fdisk查看U盘的位置
$ sudo fdisk -l #一般为/dev/sd*(我的U盘在/dev/sdd下)

使用dnw工具，将boot拷贝到U盘中
$ sudo ./dnw boot /dev/sdd
</code></pre>

<a name="L........................"></a>
<h3>第四步：开机测试</h3>

<p>开机选择你的U盘作为启动项，是不是能看到我们写入的字符。</p>

<a name="L.............................."></a>
<h4>这是真机下的测试结果</h4>

<p><img src="http://localhost/upload/2016/JAN/23/imgs/1453565743.png" alt="真机下的测试结果" /></p>

<p>我在做测试的时候出现了一种情况就是，屏幕上打印出来的是一个B，在其它区域还有许多乱码，我用同样的U盘放在另一台电脑上启动却没有如此的情况。这个问题你可以通过重启电脑来试着解决一下，最好连电池都拔下来，过几秒再装上。</p>

<a name="L..............................................................................................................."></a>
<h2>下面我提供一些测试的方法，看看你的程序是否正确，同时更加深入理解这个过程。</h2>

<pre><code class="vim">使用dd命令，将我们写入U盘的前512个字节取出来，放入u.log中
#obs表示每个输出缓冲区大小，ibs表示每个输入缓冲区大小，count表示拷贝个数，单位为输入缓冲区的大小可用bs代替
#obs和ibs
$ sudo dd if=/dev/sdd of=u.log bs=512 count=1

使用二进制查看命令打开u.log
$ xxd u.log
</code></pre>

<a name="L...............xxd......u.log.................."></a>
<h2>下面是我用xxd查看u.log查看到的内容</h2>

<p><img src="http://localhost/upload/2016/JAN/23/imgs/1453568323.png" alt="xxd查看到的U.log" /></p>
]]></content>
  </entry>
  
</feed>
